#!/usr/bin/env python
"""
Creates the moiety_structure section of the SBMLLint
configuration file. The user declares all moieties.
The moiety structure for a molecule is the number of
occurrences of each moiety string in the molecule.
"""

import argparse
import yaml
from SBMLLint.common.simple_sbml import SimpleSBML


DEFAULT_CONFIG_FILE = "config.yml"


def getMoieties(moiety_fid):
  """
  Creates the YAML configuration file.
  :param IOWrappter moiety_fid: 
  :return list-str: list of moiety names
  :raises ValueError: if one moiety is a substring of another
  """
  names = yaml.load(moiety_fid)
  names.sort()
  # look for substrings
  length = len(names)
  for idx in range(length):
    this = names[idx]
    others = names[idx+1:]
    embeddeds = [o for o in others if this in o]
    if len(embeddeds) > 0:
      raise ValueError("Moiety %s is a substring of other moieties."
          % this)
  return names

def main(xml_fid, moiety_fid, config_file):
  """
  Creates the YAML configuration file.
  :param IOWrappter xml_fid: xml file:
  :param IOWrappter moiety_fid: 
  :param str config_file: file created
  """
  # Acquire and validate moieties
  moieties = getMoieties(moiety_fid)
  # Create the configuration file
  config_dct = {} 
  simple = SimpleSBML()
  simple.initialize(xml_fid)
  for molecule in simple.molecules:
    config_dct[molecule.name] =  \
        ["%s, %d" % (m, molecule.name.count(m))
        for m in moieties if m in molecule.name]
    import pdb; pdb.set_trace()
  dct = {"moiety_structure": config_dct}
  with open(config_file, "w") as fd:
    yaml.dump(dct, fd)

    
if __name__ == '__main__':
  parser = argparse.ArgumentParser(
      description='Creates configuration file for BioModels 147.')
  parser.add_argument('xml_file', 
      type=open, 
      help='SBML file from which species names are obtained.')
  parser.add_argument('moiety_file', 
      type=open, 
      help='YAML file the specifies moieties for the XML model.')
  parser.add_argument('--output', type=str,
      help="Generated configuration file. Defaults to config.yml.")
  args = parser.parse_args()
  if args.output is None:
    config_file = DEFAULT_CONFIG_FILE
  else:
    config_file = args.output
  main(args.xml_file, args.moiety_file, config_file)
